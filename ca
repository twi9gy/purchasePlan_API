<?php

namespace App\Controller\API\V1;

use App\Entity\Category;
use App\Model\Request\CategoryDtoRequest;
use App\Repository\CategoryRepository;
use App\Repository\UserRepository;
use JMS\Serializer\SerializerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Validator\Validator\ValidatorInterface;


/**
 * @Route("/api/v1/category")
 */
class CategoryController extends AbstractController
{
    /**
     * @Route("/all", name="category_index", methods={"GET"})
     * @param \App\Repository\CategoryRepository $categoryRepository
     * @param \JMS\Serializer\SerializerInterface $serializer
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function allCategories(CategoryRepository $categoryRepository, SerializerInterface $serializer): Response
    {
        // Получаем ID текущего пользователя
        $userId = $this->getUser()->getId();
        // Получаем категории пользователя
        $categories = $categoryRepository->findByUserId($userId);

        return $this->render(
            // Сериализуем ответ в Json
            $serializer->serialize($categories, 'json')
        );
    }

    /**
     * @Route("/new", name="category_new", methods={"POST"})
     * @param \Symfony\Component\HttpFoundation\Request $request
     * @param \JMS\Serializer\SerializerInterface $serializer
     * @param \Symfony\Component\Validator\Validator\ValidatorInterface $validator
     * @param \App\Repository\CategoryRepository $categoryRepository
     * @param \App\Repository\UserRepository $userRepository
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function new(Request $request, SerializerInterface $serializer,
                        ValidatorInterface $validator, CategoryRepository $categoryRepository,
                        UserRepository $userRepository): Response
    {
        // Десериализация запроса в Dto
        $categoryDto = $serializer->deserialize($request->getContent(), CategoryDtoRequest::class, 'json');
        // Проверка ошибок валидации
        $errors = $validator->validate($categoryDto);

        if (count($errors) > 0) {
            // Формируем ответ сервера
            $data = [
                "code" => Response::HTTP_CONFLICT,
                "message" => $errors
            ];
        } else {
            // Создание объекта класса Category из Dto
            $category = \App\Entity\Category::fromDto($categoryDto, $categoryRepository);
            // Получаем текущего пользователя
            $email = $this->getUser()->getUsername();
            $user = $userRepository->findOneBy(['email' => $email]);

            if ($user !== null) {
                // Присваиваем пользователю категорию
                $user->addCategory($category);

                // Сохраняем категорию
                $entityManager = $this->getDoctrine()->getManager();
                $entityManager->persist($category);
                $entityManager->flush();

                // Формируем ответ сервера
                $data = [
                    "code" => Response::HTTP_OK,
                    "message" => 'Category has been created.'
                ];
            } else {
                // Формируем ответ сервера
                $data = [
                    "code" => Response::HTTP_FORBIDDEN,
                    "message" => 'User not found.'
                ];
            }
        }
        return new Response(
            // Сериализуем ответ в Json
            $serializer->serialize($data, 'json')
        );
    }

    /**
     * @Route("/{id}", name="category_show", methods={"GET"})
     * @param \App\Entity\Category $category
     * @param \JMS\Serializer\SerializerInterface $serializer
     * @param \App\Repository\CategoryRepository $categoryRepository
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function getCategoryByID(Category $category, SerializerInterface $serializer, CategoryRepository $categoryRepository): Response
    {
        $category = $categoryRepository->findOneBy(['id' => $category->getId()]);

        // Формируем ответ сервера
        $data = [
            "code" => Response::HTTP_OK,
            "name" => $category->getName()
        ];

        return new Response(
            // Сериализуем ответ в Json
            $serializer->serialize($data, 'json')
        );
    }

    /**
     * @Route("/{id}/edit", name="category_edit", methods={"POST"})
     * @param \Symfony\Component\HttpFoundation\Request $request
     * @param \App\Entity\Category $category
     * @param \JMS\Serializer\SerializerInterface $serializer
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function edit(Request $request, Category $category, SerializerInterface $serializer): Response
    {
        // Получаем новое название категории из запроса.
        $json = json_decode($request->getContent(), true);
        // Изменяем название категории.
        $category->setName($json["newname"]);
        // Сохраняем изменение.
        $entityManager = $this->getDoctrine()->getManager();
        $entityManager->persist($category);
        $entityManager->flush();

        // Формируем ответ сервера
        $data = [
            "code" => Response::HTTP_OK,
            "message" => "Name category has been changed."
        ];

        return new Response(
            // Сериализуем ответ в Json
            $serializer->serialize($data, 'json')
        );
    }

    /**
     * @Route("/{id}", name="category_delete", methods={"DELETE"})
     * @param \Symfony\Component\HttpFoundation\Request $request
     * @param \App\Entity\Category $category
     * @param \JMS\Serializer\SerializerInterface $serializer
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function delete(Request $request, Category $category, SerializerInterface $serializer): Response
    {
        // Удаляем кетегорию
        $entityManager = $this->getDoctrine()->getManager();
        $entityManager->remove($category);
        $entityManager->flush();

        // Формируем ответ сервера
        $data = [
            "code" => Response::HTTP_OK,
            "message" => "Category has been deleted."
        ];

        return new Response(
        // Сериализуем ответ в Json
            $serializer->serialize($data, 'json')
        );
    }
}
